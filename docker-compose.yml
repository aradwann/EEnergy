
services:
  postgres:
    container_name: postgres
    image: postgis/postgis:16-3.4-alpine
    environment:
      - POSTGRES_DB=eenergy
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=secret
    ports:
      - "5432:5432"
    volumes:
      - data-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "root", "-d", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin4:
    container_name: pgadmin4
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.com
      - PGADMIN_DEFAULT_PASSWORD=SuperSecret
    ports:
      - "80:80"

  redis:
    container_name: redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    container_name: api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 8080:8080
      - 9091:9091
    environment:
      - DB_SOURCE=postgresql://root:secret@postgres:5432/eenergy?sslmode=disable
      - REDIS_ADDRESS=redis:6379
      - OTEL_EXPORTER_OTLP_ENDPOINT
      - OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
      - OTEL_RESOURCE_ATTRIBUTES
      - OTEL_SERVICE_NAME=eenergy

    depends_on:
      postgres:  # Wait for postgres to start
        condition: service_healthy  # Only start after postgres is healthy
      redis:  # Wait for redis to start
        condition: service_healthy  # Only start after redis is healthy
      otel-collector:
        condition: service_started

  # logs containers
  loki:
    container_name: loki
    image: grafana/loki:latest
    ports:
      - "3100:3100"
      - "9095:9095"
    command: -config.file=/etc/loki/local-config.yaml -print-config-stderr
    volumes:
      - ./observability/loki/loki-config.yaml:/etc/loki/local-config.yaml
      - ./observability/loki/rules:/loki/rules/fake

  alertmanager:
    container_name: alertmanager
    image: prom/alertmanager:latest
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    depends_on:
      - prometheus

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - ./promtail-config.yml:/etc/promtail/promtail.yml
      - /var/log:/var/log
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      - loki

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - loki
  
  # metrics containers 
  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"

  # traces containes
  # Jaeger
  jaeger:
    container_name: jaeger
    image: jaegertracing/all-in-one:latest
    ports:
      - "${JAEGER_SERVICE_PORT}"         # Jaeger UI
      - "${OTEL_COLLECTOR_PORT_GRPC}"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 13133:13133 # health_check extension
      - 55679:55679 # zpages extension
      - "${OTEL_COLLECTOR_PORT_GRPC}"
      - "${OTEL_COLLECTOR_PORT_HTTP}"
    depends_on:
      - jaeger
      - prometheus

volumes:
  data-volume:
  grafana-data:
